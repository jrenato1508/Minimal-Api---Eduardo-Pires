Link da Aula: https://www.youtube.com/watch?v=aXayqUfSNvw

# Por que o Microsoft Introduziu o conceito de Minimal  API's? #
  - Porque a microsoft é uma empresa que acada ano e acada versão ela tenta mudar melhorar, nesse caso as API's ainda são utilizadas porém ela lançou um conceito a mais que são as   Minimal  API's
  
# Por que a Microsoft fez isso ? #
   - Para ganho de performace. Comparando com o .Net com o Nodes.js o .Net da uma surra  no nodes por varios conceitos, arquiteturas diferentes etc... O Web APi's nasceu dentro do MVC
	 então com intuito de não carregar o "mundo" ou as tranqueiras, isso é, varias coisas que a web api não irá usar como por exemplos dlls que tinha código de windows e outros... A Microsoft resolveu dar essa enxugada. Porque em termos de warm up. O .NET perde para o Nodes.js mesmo o .Net sendo mais rapido. é como comparar dois carros o primeiro sendo uma ferrari e o segundo um carro um pouco infeiror, na largada a ferrari sai atrás(warm up) do carro inferior, mas durante a corrida a ferrari ultrapassa e ganha com maior velocidade.
	 Mas nessa arracanda podemos assim dizer, a ferrari perde.
   
   
# Por que isso é bom? #

Aplicações que utilizam o conceito de functions(no azure) ou lambdas(AWS - mesma coisa que functions) que são o conceito de serverless. Quando uma functions é chamada ela deve ser executada rapidamente, quanto mais rapido ela for executada melhor, porém para economia de recursos no azure ou AWS a functions quando não é usada por um determinado tempo ela acaba dormindo, e quando essa functions que está dormindo é solicitada ela precisa precisa acordar e nesse momento acontece o warm up(esquentar, ficar no ponto para rodar) e é nesse ponto que o .net perde para o nodes.js por exemplo por ter um warm up mais demorado do que o nodes.js para resolver esse problema a microsoft critou a minimal APi

# Quando ou porque devemos usar? #

- Devemos usar a Minimal API's principalmente quando tivermos cenários em que estivermos usando serviços do tipo Lambda(AWS) e functions(Azure) porque o 


& Criando uma minimal Api &
Visual Studio => New Project => Asp.Net Core Web APi => Use Controllers(desmarcar essa opção)

OBS: Como se trata de uma minimal Api, devemos envitar ficar criando camadas e camadas como por exemplo camadas de acesso a dados, camada de Negocios e etc... é uma API Minimal, enxuto, então tudo acaba sendo implementado no mesmo projeto.

# Mão na massa #

1 - vamos contruir um crud de uma entidade. O primeiro passo é criar uma pasta chamada models e dentro dela adicionar uma entidade(class) com o nome fornecedores
2 - Vamos instalar o Microsoft.EntityFrameworkCore.SqlServer e Microsoft.EntityFrameworkCore.Tools para configuramos o nosso Dbcontext. 
	OBS: Instalar a mesma mersão do .Net utilizado na aplicação
2.1 - Criamos uma pasta com o Nome Data para adicionar o nosso Dbcontext que terá o nome MinimalContextDb, dentro dela, também faremos o nosso mapeamento da entidade fornecedor com o bando de dados. Como se trata de uma minimal Api, devemos envitar ficar criando camadas e camadas como por exemplo camadas de acesso a dados, camada de Negocios e etc... é uma API Minimal, enxuto, então tudo acaba sendo implementado no mesmo projeto.

2.2 - Vamos adicionar a nossa connectionStrings no appsettings.json

2.3 - Na class program.cs vamos adicionar o o contexto
		ex: builder.Services.AddDbContext<MinimalContextDb>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
	
2.4 - agora vamos rodar o comando para criar as migrations do nosso banco de dados e tabelas configuradas.
		ex: Add-migration initial

2.5 - Migration criadas, agora vamos rodar o comando para adicionar e criar o banco de dados através das migrations geradas
		ex: update-database

3- Agora vamos mapear os metodos para expor os dados da nossa Api
3.1 - O Mapeamentodos metodos serão dentro da program.cs Consultar projeto para melhor entendimento.

3.2 - Instalamos o pacote Minivalidation feito por Damian Edwards para validar a models para ser inserida no banco de dados

3.3 - Teste do CRUD Finalizado

4- Agora vamos implementar a aunteticação de usuário com Identity com JWT Token
4.1 - Instalar NetDevPack.Identity (remomendação de instalar na versão 6.0.5 porque na última versão acaba gerando erro.)
4.2 - Adicionar o serviço no projeto na class program.cs
	ex:	builder.Services.AddIdentityEntityFrameworkContextConfiguration(options =>
		options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"),
		b => b.MigrationsAssembly("DemoMinimalAPI")));
		
		e também o builder.Services.AddIdentityConfiguration();

4.3 - Adicionando o serviço na pipeline
4.4 - Adicionar no appsettings.json a nossa informações como chaves, espiração do token, issuer e audience
		ex:
			"AppSettings": {
			"SecretKey": "MYSECRETSUPERSECRET",
			"Expiration": 2,
			"Issuer": "MinimalPilot",
			"Audience": "https://localhost"
			}
4.5 - adicinar na class program logo abaixo do AddIdentityConfiguration() o builder.Services.AddJwtConfiguration(builder.Configuration, "AppSettings"); que é a chamada para o appsettings onde contém as informações do JWT

4.6- agora precisamos gerar as migrations e  adicionar as tabelas do Identity em nosso banco de dados. Com o identity configurado(os comando feitos acima) basta abrir o package Manager Console e escrever o seguinte comando Add-Migration AuthInitial(nome da migration) - Context(informando o contexto) NetDevPackAppDbContext(Nome do contexto que já está configurado no pacote  NetDevPack que instalamos. (Não fiz porque já estava usando um banco que já possuia todas as tabelas necessárias) e em seguida Adicionar as tabelas.
	ex:Add-Migration AuthInitial - Context NetDevPackAppDbContext, Add-Migration AuthInitial -Context NetDevPackAppDbContext

5- Agora vamos configurar as nossas Action de Registe e Login para o usuário poder criar um usuário e se autenticar na class program.cs
5.1- Feita a configuração das actions é só testar

6- Agora vamos decorar as actions de registe e login com [AllowAnonymous] para que elas fiquem abertas para qualquer usuário e decorar com [Authorize] as demais actions para que seja exigido a autenticação do usuário para acessar a action

6.1 - Se testarmos agora pelo Swagger, ao tentar consumir qualquer Endpoint receberemos um Status Code 401 Unauthorized que siguinifica dizer que não temos autorização para acessar, no entando se usarmos o Postman podemos consumir as informações dos Endpoint ao passar o token gerado ao se autenticar.

7 - Agora vamos trabalhar com validação de acesso com base em Claims, para isso precisaremos trabalhar com policy, coisa que sempre existiu no .Net
7.1 - Agora vamos criar uma Policy, para isso, primeiro precisamos configurar em nossa class program.cs logo a baixo do AddJwtConfiguration o seguinte código. É assimq que dizemos
	  que vamos criar uma validação com claims.
	ex:
		builder.Services.AddAuthorization(options =>
		{
			options.AddPolicy("ExcluirFornecedor",
				policy => policy.RequireClaim("ExcluirFornecedor"));
		});

7.2 - Agora para configurar a action/ Endpoint para exigir que além autenticação o usuário precisa ter determinada claim, adicionamos essa exigencia no metadado com a seguinte	informação .RequireAuthorization("ExcluirFornecedor") Vamos adicionar essa informação na action Map.Delete
	ex:
			.Produces(StatusCodes.Status400BadRequest)
			.Produces(StatusCodes.Status204NoContent)
			.Produces(StatusCodes.Status404NotFound)
			.RequireAuthorization("ExcluirFornecedor")
			.WithName("DeleteFornecedor")
			.WithTags("Fornecedor");

7.3- Agora vamos atribuir essa claim ao usuário que criamos, para isso basta pegar o Guid do usuário na tabela AspNetUsers e adicionar uma claim na tabela AspNetUserClaims com o claimType e ClaimValue como ExcluirFornecedor. O claim value não precisa mas vamos preencher de qualquer forma. Feito isso, podemos testar se o token que é gerado ao realizar o login contem as claim que adicionamos ao usuário, parra isso basta pegar o token e jogar no site jwt pra analisarmos.

8 - Agora vamos configurar o Swagger para ele aceitar jwt token para o usuário poder acessar as action/Endpoint
8.1 - a configuração do Swagger saiu de builder.Services.AddSwaggerGen() para outra implementação na class program.cs, consultar projeto para melhor entendimento

9- Organização da Minimal API. Podemos organizar melhor a minimal api como por exemplo criar uma class para mapear nossos Endpoint. Podemos criar metodos separados para fornecedores   e autenticação de usuário em duas class diferentes para separar as responsabilidades, porém que essa não é a ideia do Minimal Api, podemos fazer ? Sim, mas foge do contexto de   minimal api. Se você reparar na class Program.cs ela é nosso API inteira.

Sugestão para Organização:
1- Uso de Regions.
	ex: Configure Services, Configure Pipeline, Actions

2- Criar um metodo void MapActions(WebApplication app) e passar para dentro dele todas as nossas action e depois adicionar esse metodo no pipeline.

	ex: Metodo Void
		void MapActions(WebApplication app){Todas as actions}
	
	ex: Referenciar no pipiline
	
		app.UseHttpsRedirection();
		MapActions(app);
		app.Run();